package chop2.proj;

/**
 * 测试
 * 继承关系中的构造方法：
 * 	1.当子类的无参构造方法使用super调用父类里面无参的构造方法时，程序先执行父类的无参构造方法，再执行子类的无参构造方法。
 * 	2.当子类的无参构造方法不使用super调用父类的无参构造方法时，程序还是会先执行父类的无参构造方法，在执行子类的无参构造方法。
 * 	3.当子类的有参构造使用super调用父类的有参构造方法时，程序先执行父类有参的构造方法，再执行子类有参的构造方法。
 * 	4.当子类的有参构造方法不使用super调用父类的有参构造方法时，程序会先执行父类的无参构造方法，在执行子类的有参构造方法。
 * 	5.需要注意的是，如果要使用super,那么就得把super放在方法的第一行中
 * 子类可以继承到父类的哪些财产呢？
 * 	1.继承父类public修饰的属性，方法
 * 	2.不同包中，可以继承父类protected修饰符的属性和方法
 * 	3.同包中，可以继承父类默认修饰符的属性和方法
 * 	4.不可以继承private修饰的属性和方法，private只能在本类中访问。
 * 创建子类的无参构造方法
 *  1.进入子类的无参构造方法
 *  2.进入父类的无参构造方法
 *  3.进入子类的无参构造方法
 *  创建子类的有参构造方法
 *  *  1.进入子类的有参构造方法
 *  *  2.进入父类的有参构造方法
 *  *  3.进入子类的有参构造方法
 *  创建子类的有参构造方法(在子类的有参构造方法中不去调用父类的有参方法或无参方法)
 *  1.进入子类的有参构造方法
 *  2.进入父类的无参构造方法
 *  3.进入子类的有参构造方法
 *  符合狗是动物：使用继承 is a 什么是什么
 *  构造方法不能重写
 */
public class PetMain {
    public static void main(String[] args) {
        //继承于父类
        Dog dog=new Dog("小黄",100,100,"柯基");
        dog.show();
        System.out.println(dog.getName());
        //

    }
}
